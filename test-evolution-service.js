// test-evolution-service.js

const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase (ajustez selon votre config)
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'YOUR_SUPABASE_URL';
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'YOUR_SUPABASE_KEY';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testEvolutionService() {
  console.log('üß™ Test du service Evolution avec Supabase...\n');

  try {
    // 1. Tester la connexion
    console.log('1Ô∏è‚É£ Test de connexion Supabase...');
    const { data: { users }, error: authError } = await supabase.auth.admin.listUsers();
    if (authError) {
      console.error('‚ùå Erreur connexion:', authError.message);
      return;
    }
    console.log('‚úÖ Connexion Supabase OK\n');

    // 2. V√©rifier les tables d'√©volution
    console.log('2Ô∏è‚É£ V√©rification des tables d\'√©volution...');
    
    const tables = [
      'user_achievements',
      'user_activity_timeline', 
      'user_motivation_stats',
      'user_activity_heatmap'
    ];

    for (const table of tables) {
      try {
        const { count, error } = await supabase
          .from(table)
          .select('*', { count: 'exact', head: true });
        
        if (error) {
          console.log(`‚ùå Table ${table}: ${error.message}`);
        } else {
          console.log(`‚úÖ Table ${table}: ${count || 0} entr√©es`);
        }
      } catch (err) {
        console.log(`‚ùå Table ${table}: Erreur acc√®s`);
      }
    }
    console.log('');

    // 3. Test avec donn√©es utilisateur existantes
    console.log('3Ô∏è‚É£ Test donn√©es utilisateur...');
    
    // Trouver un utilisateur avec des donn√©es
    const { data: programmes } = await supabase
      .from('user_programmes')
      .select('user_id')
      .limit(1);

    if (!programmes || programmes.length === 0) {
      console.log('‚ö†Ô∏è Aucun utilisateur trouv√© avec des donn√©es programme');
      return;
    }

    const userId = programmes[0].user_id;
    console.log(`üîç Test avec utilisateur: ${userId}`);

    // V√©rifier les donn√©es existantes
    const { data: entries } = await supabase
      .from('programme_entries')
      .select('*')
      .eq('user_id', userId)
      .limit(5);

    const { data: progress } = await supabase
      .from('subpart_progress')
      .select('*')
      .eq('user_id', userId);

    console.log(`üìù Entr√©es programme: ${entries?.length || 0}`);
    console.log(`üìä Progr√®s sous-parties: ${progress?.length || 0}`);
    console.log('');

    // 4. Test d'une simulation de mise √† jour
    console.log('4Ô∏è‚É£ Test simulation mise √† jour activit√©...');
    
    try {
      // Simuler l'ajout d'une activit√© dans la timeline
      const { error: timelineError } = await supabase
        .from('user_activity_timeline')
        .insert({
          user_id: userId,
          activity_type: 'test_activity',
          activity_data: { test: true, timestamp: new Date().toISOString() }
        });

      if (timelineError) {
        console.log(`‚ö†Ô∏è Simulation timeline: ${timelineError.message}`);
      } else {
        console.log('‚úÖ Simulation timeline OK');
      }

      // Mettre √† jour la heatmap pour aujourd'hui
      const today = new Date().toISOString().split('T')[0];
      const { error: heatmapError } = await supabase
        .from('user_activity_heatmap')
        .upsert({
          user_id: userId,
          date: today,
          activity_count: 1,
          activity_level: 1
        }, { onConflict: 'user_id,date' });

      if (heatmapError) {
        console.log(`‚ö†Ô∏è Simulation heatmap: ${heatmapError.message}`);
      } else {
        console.log('‚úÖ Simulation heatmap OK');
      }

    } catch (simError) {
      console.log(`‚ö†Ô∏è Erreur simulation: ${simError.message}`);
    }

    console.log('\nüéâ Tests termin√©s !');
    console.log('\nüìù R√©sum√©:');
    console.log('- Tables √©volution: V√©rifi√©es');
    console.log('- Connexion Supabase: OK'); 
    console.log('- Simulation activit√©: Test√©e');
    console.log('\nüîÑ Le service Evolution est pr√™t √† √™tre utilis√© avec des donn√©es r√©elles.');

  } catch (error) {
    console.error('üí• Erreur test:', error);
  }
}

// Ex√©cuter le test
testEvolutionService();
